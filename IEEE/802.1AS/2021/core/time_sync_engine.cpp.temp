/**
 * @file time_sync_engine.cpp
 * @brief IEEE 802.1AS-2021 Time Synchronization Engine Implementation
 * @details Pure standard implementation - hardware abstraction via interfaces
 * 
 * @author OpenAvnu Standards Team
 * @date 2025
 * @copyright IEEE Standards - Complete IEEE 802.1AS-2021 implementation
 */

// TODO: CRITICAL ARCHITECTURE VIOLATION - Intel HAL code contaminating Standards layer
// TODO: Remove all intel_hal_* calls from this Standards implementation
// TODO: Use proper hardware abstraction interface instead of direct HAL calls
// TODO: Move all hardware-specific logic to HAL layer where it belongs
// TODO: Keep Standards layer pure IEEE 802.1AS-2021 compliant

#include "time_sync_engine.h"
#include <algorithm>
#include <cmath>
#include <deque>
#include <mutex>
#include <thread>
#include <condition_variable>

namespace IEEE {
namespace _802_1AS {
namespace _2021 {

/**
 * @brief DEPRECATED Time Synchronization Engine Implementation
 * @details DEPRECATED - This class contains Intel HAL violations and will be removed
 * @deprecated Use TimeSynchronizationEngine::Implementation (proper version) instead
 */
class TimeSynchronizationEngine::DeprecatedImplementation {
public:
    Implementation(const std::string& interface_name)
        : interface_name_(interface_name)
        , hal_initialized_(false)
        , device_handle_(nullptr) {}

    ~Implementation() {
        shutdown_hal();
    }

    // DEPRECATED: Direct Intel HAL initialization violates Standards layer architecture
    [[deprecated("Standards layer must be hardware-agnostic. Hardware initialization should be handled by injected HardwareTimestampInterface implementation. This function will be removed after migration to proper dependency injection pattern.")]]
    bool initialize_hal() {
        // TODO: MAJOR ARCHITECTURE VIOLATION - Intel HAL code in Standards layer!
        // TODO: This entire method violates hardware abstraction principles
        // TODO: Remove intel_hal_* calls and use proper hardware abstraction interface
#ifdef OPENAVNU_BUILD_INTEL_HAL
        if (hal_initialized_) return true;

        // DEPRECATED: Direct Intel HAL access in Standards layer
        device_handle_ = intel_hal_open_device(interface_name_.c_str());
        if (!device_handle_) {
            return false;
        }

        // DEPRECATED: Hardware-specific configuration in Standards layer
        intel_hal_config_t config = {};
        config.enable_tx_timestamping = true;
        config.enable_rx_timestamping = true;
        config.timestamp_accuracy = INTEL_HAL_TIMESTAMP_ACCURACY_1NS;
        
        if (intel_hal_configure_device(device_handle_, &config) != INTEL_HAL_SUCCESS) {
            intel_hal_close_device(device_handle_);
            device_handle_ = nullptr;
            return false;
        }

        hal_initialized_ = true;
        return true;
#else
        // Fallback implementation for systems without Intel HAL
        hal_initialized_ = true;
        return true;
#endif
    }

    // DEPRECATED: Direct Intel HAL shutdown violates Standards layer architecture
    [[deprecated("Standards layer must be hardware-agnostic. Hardware cleanup should be handled by injected HardwareTimestampInterface implementation. This function will be removed after migration to proper dependency injection pattern.")]]
    bool shutdown_hal() {
#ifdef OPENAVNU_BUILD_INTEL_HAL
        if (!hal_initialized_) return true;

        if (device_handle_) {
            intel_hal_close_device(device_handle_);
            device_handle_ = nullptr;
        }

        hal_initialized_ = false;
        return true;
#else
        hal_initialized_ = false;
        return true;
#endif
    }

    // DEPRECATED: Direct Intel HAL timestamp capture violates Standards layer architecture
    [[deprecated("Standards layer must use injected HardwareTimestampInterface for hardware abstraction. Direct intel_hal_get_tx_timestamp calls violate architectural separation. This function will be removed after migration to proper dependency injection pattern.")]]
    bool capture_tx_timestamp(uint16_t sequence_id, HardwareTimestampInterface::TimestampCapture& capture) {
#ifdef OPENAVNU_BUILD_INTEL_HAL
        if (!hal_initialized_ || !device_handle_) return false;

        // DEPRECATED: Direct Intel HAL call in Standards layer
        intel_hal_timestamp_t hw_timestamp = {};
        if (intel_hal_get_tx_timestamp(device_handle_, sequence_id, &hw_timestamp) == INTEL_HAL_SUCCESS) {
            // Convert Intel HAL timestamp to IEEE 802.1AS timestamp
            capture.timestamp.seconds_field = hw_timestamp.seconds;
            capture.timestamp.nanoseconds_field = hw_timestamp.nanoseconds;
            capture.sequence_id = sequence_id;
            capture.valid = true;
            capture.capture_time = std::chrono::steady_clock::now();
            return true;
        }
        return false;
#else
        // Simulate timestamp for testing without hardware
        auto now = std::chrono::steady_clock::now();
        auto epoch = now.time_since_epoch();
        auto seconds = std::chrono::duration_cast<std::chrono::seconds>(epoch);
        auto nanoseconds = std::chrono::duration_cast<std::chrono::nanoseconds>(epoch - seconds);

        capture.timestamp.seconds_field = static_cast<uint64_t>(seconds.count());
        capture.timestamp.nanoseconds_field = static_cast<uint32_t>(nanoseconds.count());
        capture.sequence_id = sequence_id;
        capture.valid = true;
        capture.capture_time = now;
        return true;
#endif
    }

    // DEPRECATED: Direct Intel HAL timestamp capture violates Standards layer architecture
    [[deprecated("Standards layer must use injected HardwareTimestampInterface for hardware abstraction. Direct intel_hal_get_rx_timestamp calls violate architectural separation. This function will be removed after migration to proper dependency injection pattern.")]]
    bool capture_rx_timestamp(uint16_t sequence_id, HardwareTimestampInterface::TimestampCapture& capture) {
#ifdef OPENAVNU_BUILD_INTEL_HAL
        if (!hal_initialized_ || !device_handle_) return false;

        // DEPRECATED: Direct Intel HAL call in Standards layer
        intel_hal_timestamp_t hw_timestamp = {};
        if (intel_hal_get_rx_timestamp(device_handle_, sequence_id, &hw_timestamp) == INTEL_HAL_SUCCESS) {
            capture.timestamp.seconds_field = hw_timestamp.seconds;
            capture.timestamp.nanoseconds_field = hw_timestamp.nanoseconds;
            capture.sequence_id = sequence_id;
            capture.valid = true;
            capture.capture_time = std::chrono::steady_clock::now();
            return true;
        }
        return false;
#else
        // Simulate timestamp for testing
        return capture_tx_timestamp(sequence_id, capture);
#endif
    }

    // DEPRECATED: Direct Intel HAL clock adjustment violates Standards layer architecture
    [[deprecated("Standards layer must use injected HardwareTimestampInterface for hardware abstraction. Direct intel_hal_adjust_clock_frequency calls violate architectural separation. This function will be removed after migration to proper dependency injection pattern.")]]
    bool adjust_clock_frequency(int32_t ppb_adjustment) {
#ifdef OPENAVNU_BUILD_INTEL_HAL
        if (!hal_initialized_ || !device_handle_) return false;
        return intel_hal_adjust_clock_frequency(device_handle_, ppb_adjustment) == INTEL_HAL_SUCCESS;
#else
        // Simulate successful adjustment
        simulated_frequency_adjustment_ = ppb_adjustment;
        return true;
#endif
    }

    // DEPRECATED: Direct Intel HAL clock adjustment violates Standards layer architecture
    [[deprecated("Standards layer must use injected HardwareTimestampInterface for hardware abstraction. Direct intel_hal_adjust_clock_phase calls violate architectural separation. This function will be removed after migration to proper dependency injection pattern.")]]
    bool adjust_clock_phase(TimeInterval phase_adjustment) {
#ifdef OPENAVNU_BUILD_INTEL_HAL
        if (!hal_initialized_ || !device_handle_) return false;
        // DEPRECATED: Direct Intel HAL call in Standards layer
        return intel_hal_adjust_clock_phase(device_handle_, phase_adjustment) == INTEL_HAL_SUCCESS;
#else
        // Simulate successful adjustment
        simulated_phase_adjustment_ = phase_adjustment;
        return true;
#endif
    }

    // DEPRECATED: Direct Intel HAL clock setting violates Standards layer architecture
    [[deprecated("Standards layer must use injected HardwareTimestampInterface for hardware abstraction. Direct intel_hal_set_clock_time calls violate architectural separation. This function will be removed after migration to proper dependency injection pattern.")]]
    bool set_clock_time(const Timestamp& time) {
#ifdef OPENAVNU_BUILD_INTEL_HAL
        if (!hal_initialized_ || !device_handle_) return false;
        // DEPRECATED: Direct Intel HAL call in Standards layer
        intel_hal_timestamp_t hw_time = {time.seconds_field, time.nanoseconds_field};
        return intel_hal_set_clock_time(device_handle_, &hw_time) == INTEL_HAL_SUCCESS;
#else
        simulated_clock_time_ = time;
        return true;
#endif
    }

    // DEPRECATED: Direct Intel HAL clock reading violates Standards layer architecture
    [[deprecated("Standards layer must use injected HardwareTimestampInterface for hardware abstraction. Direct intel_hal_get_clock_time calls violate architectural separation. This function will be removed after migration to proper dependency injection pattern.")]]
    bool get_clock_time(Timestamp& time) {
#ifdef OPENAVNU_BUILD_INTEL_HAL
        if (!hal_initialized_ || !device_handle_) return false;
        // DEPRECATED: Direct Intel HAL call in Standards layer
        intel_hal_timestamp_t hw_time = {};
        if (intel_hal_get_clock_time(device_handle_, &hw_time) == INTEL_HAL_SUCCESS) {
            time.seconds_field = hw_time.seconds;
            time.nanoseconds_field = hw_time.nanoseconds;
            return true;
        }
        return false;
#else
        time = simulated_clock_time_;
        return true;
#endif
    }

    bool supports_one_step() const {
#ifdef OPENAVNU_BUILD_INTEL_HAL
        return true; // Intel NICs typically support one-step
#else
        return false;
#endif
    }

    bool supports_two_step() const {
        return true; // Always supported
    }

    TimeInterval get_timestamp_accuracy() const {
#ifdef OPENAVNU_BUILD_INTEL_HAL
        return 1; // 1ns accuracy for Intel hardware
#else
        return 1000; // 1Âµs simulated accuracy
#endif
    }

    bool is_hal_initialized() const {
        return hal_initialized_;
    }

private:
    std::string interface_name_;
    bool hal_initialized_;
    void* device_handle_;
    
    // Simulation variables for non-HAL builds
    int32_t simulated_frequency_adjustment_{0};
    TimeInterval simulated_phase_adjustment_{0};
    Timestamp simulated_clock_time_{0, 0};
};

/**
 * @brief Time Synchronization Engine Implementation
 * @details Complete time synchronization with hardware abstraction
 */
class TimeSynchronizationEngine::Implementation {
public:
    Implementation(std::unique_ptr<HardwareTimestampInterface> hw_interface, 
                  const Configuration& config)
        : hw_interface_(std::move(hw_interface))
        , config_(config)
        , sync_state_(SyncState::UNSYNCHRONIZED)
        , running_(false) {}

    ~Implementation() {
        stop_synchronization();
    }

    bool start_synchronization() {
        std::lock_guard<std::mutex> lock(mutex_);
        if (running_) return true;

        running_ = true;
        sync_state_ = SyncState::SYNCHRONIZING;
        statistics_.current_state = sync_state_;
        
        // Reset synchronization state
        offset_filter_.clear();
        frequency_adjustment_history_.clear();
        
        return true;
    }

    bool stop_synchronization() {
        std::lock_guard<std::mutex> lock(mutex_);
        if (!running_) return true;

        running_ = false;
        sync_state_ = SyncState::UNSYNCHRONIZED;
        statistics_.current_state = sync_state_;
        
        return true;
    }

    bool reset_synchronization() {
        std::lock_guard<std::mutex> lock(mutex_);
        
        sync_state_ = SyncState::UNSYNCHRONIZED;
        statistics_ = Statistics{};
        offset_filter_.clear();
        frequency_adjustment_history_.clear();
        
        return true;
    }

    bool process_sync_message(const SyncMessage& sync, const Timestamp& rx_timestamp) {
        std::lock_guard<std::mutex> lock(mutex_);
        if (!running_) return false;

        // Store sync message for follow-up processing
        pending_sync_ = sync;
        pending_sync_rx_timestamp_ = rx_timestamp;
        pending_sync_valid_ = true;
        
        statistics_.sync_messages_processed++;
        statistics_.last_sync_time = std::chrono::steady_clock::now();
        
        return true;
    }

    bool process_follow_up_message(const FollowUpMessage& follow_up) {
        std::lock_guard<std::mutex> lock(mutex_);
        if (!running_ || !pending_sync_valid_) return false;

        // Verify follow-up matches pending sync
        if (follow_up.header.sequence_id != pending_sync_.header.sequence_id) {
            return false;
        }

        // Calculate offset using two-step timestamps
        TimeInterval master_to_slave_delay = calculate_offset(follow_up.precise_origin_timestamp, 
                                                            pending_sync_rx_timestamp_);
        
        // Apply path delay correction (requires path delay measurement)
        TimeInterval corrected_offset = master_to_slave_delay - statistics_.mean_path_delay;
        
        // Update offset filter
        update_offset_filter(corrected_offset);
        
        // Apply synchronization adjustments
        apply_synchronization_adjustment(corrected_offset);
        
        statistics_.follow_up_messages_processed++;
        pending_sync_valid_ = false;
        
        return true;
    }

    SyncState get_sync_state() const {
        std::lock_guard<std::mutex> lock(mutex_);
        return sync_state_;
    }

    TimeInterval get_current_offset() const {
        std::lock_guard<std::mutex> lock(mutex_);
        return statistics_.current_offset;
    }

    bool is_synchronized() const {
        std::lock_guard<std::mutex> lock(mutex_);
        return sync_state_ == SyncState::SYNCHRONIZED;
    }

    Configuration get_configuration() const {
        std::lock_guard<std::mutex> lock(mutex_);
        return config_;
    }

    bool set_configuration(const Configuration& config) {
        std::lock_guard<std::mutex> lock(mutex_);
        config_ = config;
        return true;
    }

    Statistics get_statistics() const {
        std::lock_guard<std::mutex> lock(mutex_);
        return statistics_;
    }

    void reset_statistics() {
        std::lock_guard<std::mutex> lock(mutex_);
        statistics_ = Statistics{};
        statistics_.current_state = sync_state_;
    }

    HardwareTimestampInterface* get_hardware_interface() const {
        return hw_interface_.get();
    }

private:
    TimeInterval calculate_offset(const Timestamp& master_timestamp, 
                                const Timestamp& slave_timestamp) {
        // Convert timestamps to nanoseconds for calculation
        int64_t master_ns = static_cast<int64_t>(master_timestamp.seconds_field) * 1000000000LL + 
                           master_timestamp.nanoseconds_field;
        int64_t slave_ns = static_cast<int64_t>(slave_timestamp.seconds_field) * 1000000000LL + 
                          slave_timestamp.nanoseconds_field;
        
        return static_cast<TimeInterval>(slave_ns - master_ns);
    }

    void update_offset_filter(TimeInterval offset) {
        // Exponential moving average filter
        const size_t FILTER_SIZE = 8;
        
        offset_filter_.push_back(offset);
        if (offset_filter_.size() > FILTER_SIZE) {
            offset_filter_.pop_front();
        }
        
        // Calculate filtered offset
        TimeInterval sum = 0;
        for (auto& o : offset_filter_) {
            sum += o;
        }
        statistics_.current_offset = sum / static_cast<TimeInterval>(offset_filter_.size());
    }

    void apply_synchronization_adjustment(TimeInterval offset) {
        // Check if adjustment is needed
        if (std::abs(offset) < config_.min_offset_threshold) {
            if (sync_state_ == SyncState::SYNCHRONIZING) {
                sync_state_ = SyncState::SYNCHRONIZED;
                statistics_.current_state = sync_state_;
            }
            return;
        }

        // Apply frequency adjustment for long-term stability
        if (config_.enable_frequency_adjustment && offset_filter_.size() >= 4) {
            apply_frequency_adjustment(offset);
        }

        // Apply phase adjustment for immediate correction
        if (config_.enable_phase_adjustment && std::abs(offset) > config_.min_offset_threshold) {
            apply_phase_adjustment(offset);
        }

        // Update state
        if (std::abs(offset) > config_.max_offset_threshold) {
            sync_state_ = SyncState::SYNCHRONIZING;
        } else {
            sync_state_ = SyncState::SYNCHRONIZED;
        }
        statistics_.current_state = sync_state_;
    }

    void apply_frequency_adjustment(TimeInterval offset) {
        // Calculate frequency adjustment using PI controller
        const double KP = 1.0e-6;  // Proportional gain
        const double KI = 1.0e-9;  // Integral gain
        
        static double integral = 0.0;
        static TimeInterval previous_offset = 0;
        
        double error = static_cast<double>(offset);
        integral += error;
        
        // Limit integral windup
        const double MAX_INTEGRAL = 1.0e6;
        integral = std::max(-MAX_INTEGRAL, std::min(MAX_INTEGRAL, integral));
        
        double adjustment = KP * error + KI * integral;
        int32_t ppb_adjustment = static_cast<int32_t>(adjustment * config_.frequency_adjustment_ratio);
        
        if (hw_interface_->adjust_clock_frequency(ppb_adjustment)) {
            statistics_.frequency_adjustments++;
            statistics_.current_frequency_adjustment = ppb_adjustment;
            statistics_.last_adjustment_time = std::chrono::steady_clock::now();
            
            frequency_adjustment_history_.push_back(ppb_adjustment);
            if (frequency_adjustment_history_.size() > 16) {
                frequency_adjustment_history_.pop_front();
            }
        }
    }

    void apply_phase_adjustment(TimeInterval offset) {
        // Apply phase adjustment for large offsets
        if (std::abs(offset) > 1000000) { // > 1ms, step adjustment
            Timestamp current_time;
            if (hw_interface_->get_clock_time(current_time)) {
                int64_t adjusted_ns = static_cast<int64_t>(current_time.seconds_field) * 1000000000LL + 
                                     current_time.nanoseconds_field - offset;
                
                Timestamp adjusted_time;
                adjusted_time.seconds_field = static_cast<uint64_t>(adjusted_ns / 1000000000LL);
                adjusted_time.nanoseconds_field = static_cast<uint32_t>(adjusted_ns % 1000000000LL);
                
                if (hw_interface_->set_clock_time(adjusted_time)) {
                    statistics_.phase_adjustments++;
                    statistics_.last_adjustment_time = std::chrono::steady_clock::now();
                }
            }
        } else {
            // Gradual phase adjustment
            if (hw_interface_->adjust_clock_phase(-offset)) {
                statistics_.phase_adjustments++;
                statistics_.last_adjustment_time = std::chrono::steady_clock::now();
            }
        }
    }

private:
    std::unique_ptr<HardwareTimestampInterface> hw_interface_;
    Configuration config_;
    SyncState sync_state_;
    Statistics statistics_;
    bool running_;
    mutable std::mutex mutex_;
    
    // Synchronization state
    std::deque<TimeInterval> offset_filter_;
    std::deque<int32_t> frequency_adjustment_history_;
    
    // Pending sync processing
    SyncMessage pending_sync_;
    Timestamp pending_sync_rx_timestamp_;
    bool pending_sync_valid_{false};
};

/**
 * @brief Path Delay Engine Implementation
 */
class PathDelayEngine::Implementation {
public:
    Implementation(std::unique_ptr<HardwareTimestampInterface> hw_interface,
                  const Configuration& config)
        : hw_interface_(std::move(hw_interface))
        , config_(config)
        , running_(false)
        , calibrated_(false) {}

    ~Implementation() {
        stop_measurements();
    }

    bool start_measurements() {
        std::lock_guard<std::mutex> lock(mutex_);
        if (running_) return true;

        running_ = true;
        measurement_thread_ = std::thread(&Implementation::measurement_loop, this);
        
        return true;
    }

    bool stop_measurements() {
        {
            std::lock_guard<std::mutex> lock(mutex_);
            if (!running_) return true;
            running_ = false;
        }
        
        cv_.notify_all();
        
        if (measurement_thread_.joinable()) {
            measurement_thread_.join();
        }
        
        return true;
    }

    bool send_pdelay_request() {
        // Implementation would send PDelay_Req message
        // This is a placeholder for the actual network transmission
        return true;
    }

    PathDelayMeasurement get_current_measurement() const {
        std::lock_guard<std::mutex> lock(mutex_);
        return current_result_;
    }

    TimeInterval get_mean_path_delay() const {
        std::lock_guard<std::mutex> lock(mutex_);
        return current_result_.mean_path_delay;
    }

    bool is_measurement_valid() const {
        std::lock_guard<std::mutex> lock(mutex_);
        return current_result_.is_valid;
    }

    Configuration get_configuration() const {
        std::lock_guard<std::mutex> lock(mutex_);
        return config_;
    }

    bool set_configuration(const Configuration& config) {
        std::lock_guard<std::mutex> lock(mutex_);
        config_ = config;
        return true;
    }

    bool is_calibrated() const {
        std::lock_guard<std::mutex> lock(mutex_);
        return calibrated_;
    }

private:
    void measurement_loop() {
        while (running_) {
            std::unique_lock<std::mutex> lock(mutex_);
            
            // Wait for interval or stop signal
            if (cv_.wait_for(lock, config_.pdelay_interval, [this] { return !running_; })) {
                break;
            }
            
            // Send PDelay request
            send_pdelay_request();
            
            // Update measurement validity based on timeout
            auto now = std::chrono::steady_clock::now();
            if (current_result_.last_measurement + config_.pdelay_timeout < now) {
                current_result_.is_valid = false;
            }
        }
    }

private:
    std::unique_ptr<HardwareTimestampInterface> hw_interface_;
    Configuration config_;
    bool running_;
    bool calibrated_;
    mutable std::mutex mutex_;
    std::condition_variable cv_;
    std::thread measurement_thread_;
    
    PathDelayMeasurement current_result_;
};

// IntelHALTimestampInterface Implementation
IntelHALTimestampInterface::IntelHALTimestampInterface(const std::string& interface_name)
    : pImpl(std::make_unique<Implementation>(interface_name)) {}

IntelHALTimestampInterface::~IntelHALTimestampInterface() = default;

bool IntelHALTimestampInterface::capture_tx_timestamp(uint16_t sequence_id, TimestampCapture& capture) {
    return pImpl->capture_tx_timestamp(sequence_id, capture);
}

bool IntelHALTimestampInterface::capture_rx_timestamp(uint16_t sequence_id, TimestampCapture& capture) {
    return pImpl->capture_rx_timestamp(sequence_id, capture);
}

bool IntelHALTimestampInterface::adjust_clock_frequency(int32_t ppb_adjustment) {
    return pImpl->adjust_clock_frequency(ppb_adjustment);
}

bool IntelHALTimestampInterface::adjust_clock_phase(TimeInterval phase_adjustment) {
    return pImpl->adjust_clock_phase(phase_adjustment);
}

bool IntelHALTimestampInterface::set_clock_time(const Timestamp& time) {
    return pImpl->set_clock_time(time);
}

bool IntelHALTimestampInterface::get_clock_time(Timestamp& time) {
    return pImpl->get_clock_time(time);
}

bool IntelHALTimestampInterface::supports_one_step() const {
    return pImpl->supports_one_step();
}

bool IntelHALTimestampInterface::supports_two_step() const {
    return pImpl->supports_two_step();
}

TimeInterval IntelHALTimestampInterface::get_timestamp_accuracy() const {
    return pImpl->get_timestamp_accuracy();
}

bool IntelHALTimestampInterface::initialize_hal() {
    return pImpl->initialize_hal();
}

bool IntelHALTimestampInterface::shutdown_hal() {
    return pImpl->shutdown_hal();
}

bool IntelHALTimestampInterface::is_hal_initialized() const {
    return pImpl->is_hal_initialized();
}

// TimeSynchronizationEngine Implementation
TimeSynchronizationEngine::TimeSynchronizationEngine(std::unique_ptr<HardwareTimestampInterface> hw_interface,
                                                   const Configuration& config)
    : pImpl(std::make_unique<Implementation>(std::move(hw_interface), config)) {}

TimeSynchronizationEngine::~TimeSynchronizationEngine() = default;

bool TimeSynchronizationEngine::start() {
    return pImpl->start_synchronization();
}

bool TimeSynchronizationEngine::stop() {
    return pImpl->stop_synchronization();
}

bool TimeSynchronizationEngine::reset_synchronization() {
    return pImpl->reset_synchronization();
}

bool TimeSynchronizationEngine::process_sync_message(const SyncMessage& sync, const Timestamp& rx_timestamp) {
    return pImpl->process_sync_message(sync, rx_timestamp);
}

bool TimeSynchronizationEngine::process_follow_up_message(const FollowUpMessage& follow_up) {
    return pImpl->process_follow_up_message(follow_up);
}

TimeSynchronizationEngine::SyncState TimeSynchronizationEngine::get_sync_state() const {
    return pImpl->get_sync_state();
}

TimeInterval TimeSynchronizationEngine::get_current_offset() const {
    return pImpl->get_current_offset();
}

TimeInterval TimeSynchronizationEngine::get_mean_path_delay() const {
    return 0; // Would get from associated path delay engine
}

bool TimeSynchronizationEngine::is_synchronized() const {
    return pImpl->is_synchronized();
}

bool TimeSynchronizationEngine::set_configuration(const Configuration& config) {
    return pImpl->set_configuration(config);
}

TimeSynchronizationEngine::Configuration TimeSynchronizationEngine::get_configuration() const {
    return pImpl->get_configuration();
}

TimeSynchronizationEngine::Statistics TimeSynchronizationEngine::get_statistics() const {
    return pImpl->get_statistics();
}

void TimeSynchronizationEngine::reset_statistics() {
    pImpl->reset_statistics();
}

HardwareTimestampInterface* TimeSynchronizationEngine::get_hardware_interface() const {
    return pImpl->get_hardware_interface();
}

// PathDelayEngine Implementation
PathDelayEngine::PathDelayEngine(std::unique_ptr<HardwareTimestampInterface> hw_interface,
                               const Configuration& config)
    : pImpl(std::make_unique<Implementation>(std::move(hw_interface), config)) {}

PathDelayEngine::~PathDelayEngine() = default;

bool PathDelayEngine::start_measurements() {
    return pImpl->start_measurements();
}

bool PathDelayEngine::stop_measurements() {
    return pImpl->stop_measurements();
}

bool PathDelayEngine::send_pdelay_request() {
    return pImpl->send_pdelay_request();
}

PathDelayEngine::MeasurementResult PathDelayEngine::get_current_measurement() const {
    return pImpl->get_current_measurement();
}

TimeInterval PathDelayEngine::get_mean_path_delay() const {
    return pImpl->get_mean_path_delay();
}

bool PathDelayEngine::is_measurement_valid() const {
    return pImpl->is_measurement_valid();
}

PathDelayEngine::Configuration PathDelayEngine::get_configuration() const {
    return pImpl->get_configuration();
}

bool PathDelayEngine::set_configuration(const Configuration& config) {
    return pImpl->set_configuration(config);
}

bool PathDelayEngine::is_calibrated() const {
    return pImpl->is_calibrated();
}

} // namespace _2021
} // namespace _802_1AS
} // namespace IEEE
